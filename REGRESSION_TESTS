#!/bin/sh

# $Id: REGRESSION_TESTS,v 1.5 2005/08/03 19:15:53 we7u Exp $

# Simple regression tests.  Run through various combinations of the
# configure flags, create a lot file, then grep for "warning" or
# "error" through that log file when done.  This is intended to be
# run as a normal user on a system that has all of the optional
# libraries installed and usable.
#
# Copyright (C)  2005  The Xastir Group.
#
# Licensed under the GPL license.  See the file "COPYING" for more
# information.



./bootstrap.sh



# Test with ZERO optional libraries
echo
echo TEST: No optional libraries...
(rm regression.log 2>&1) >/dev/null
(./configure --without-ax25 --without-festival --without-gpsman \
--without-shapelib --without-imagemagick --without-libproj \
--without-geotiff --without-gdal --without-pcre --without-dbfawk \
--without-map-cache 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with ALL optional libraries
echo
echo TEST: ALL optional libraries...
rm regression.log
(./configure --with-errorpopups --with-rtree --with-profiling \
--with-libgc 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with every other library included
echo
echo TEST: Half of the libraries...
rm regression.log
(./configure --without-festival --without-shapelib \
--without-libproj --without-gdal --without-dbfawk \
--with-errorpopups --with-profiling 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with the opposite set of libraries
echo
echo TEST: The other half...
rm regression.log
(./configure --without-ax25 --without-gpsman --without-imagemagick \
--without-geotiff --without-pcre --without-map-cache --with-rtree \
--with-libgc 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --without-ax25...
rm regression.log
(./configure --without-ax25 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --without-festival...
rm regression.log
(./configure --without-festival 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --without-gpsman...
rm regression.log
(./configure --without-gpsman 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --without-imagemagick...
rm regression.log
(./configure --without-imagemagick 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --without-libproj...
rm regression.log
(./configure --without-libproj 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --without-geotiff...
rm regression.log
(./configure --without-geotiff 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --without-gdal...
rm regression.log
(./configure --without-gdal 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --without-shapelib...
rm regression.log
(./configure --without-shapelib 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --without-pcre...
rm regression.log
(./configure --without-pcre 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --without-dbfawk...
rm regression.log
(./configure --without-dbfawk 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --without-map-cache...
rm regression.log
(./configure --without-map-cache 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --with-errorpopups...
rm regression.log
(./configure --with-errorpopups 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --with-libgc...
rm regression.log
(./configure --with-libgc 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --with-profiling...
rm regression.log
(./configure --with-profiling 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo TEST: --with-rtree...
rm regression.log
(./configure --with-rtree 2>&1) >> regression.log
cat summary.log
(make clean 2>&1) >/dev/null
(make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Cleanup
rm regression.log


