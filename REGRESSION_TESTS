#!/bin/sh

# $Id: REGRESSION_TESTS,v 1.10 2005/08/22 18:35:45 we7u Exp $

# Simple regression tests.  Run through various combinations of the
# configure flags, create a lot file, then grep for "warning" or
# "error" through that log file when done.  This is intended to be
# run as a normal user on a system that has all of the optional
# libraries installed and usable.
#
# Copyright (C)  2005  The Xastir Group.
#
# Licensed under the GPL license.  See the file "COPYING" for more
# information.



nice ./bootstrap.sh



# Test with ZERO optional libraries
echo
echo "    TEST: No optional libraries..."
(rm regression.log 2>&1) >/dev/null
(nice ./configure --without-ax25 --without-festival --without-gpsman \
--without-shapelib --without-imagemagick --without-libproj \
--without-geotiff --without-gdal --without-pcre --without-dbfawk \
--without-map-cache 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with ALL optional libraries
echo
echo "    TEST: ALL optional libraries..."
rm regression.log
(nice ./configure --with-errorpopups --with-rtree --with-profiling \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --without-ax25..."
rm regression.log
(nice ./configure --without-ax25 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --without-festival..."
rm regression.log
(nice ./configure --without-festival 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --without-gpsman..."
rm regression.log
(nice ./configure --without-gpsman 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --without-imagemagick..."
rm regression.log
(nice ./configure --without-imagemagick 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --without-libproj..."
rm regression.log
(nice ./configure --without-libproj 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --without-geotiff..."
rm regression.log
(nice ./configure --without-geotiff 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --without-gdal..."
rm regression.log
(nice ./configure --without-gdal 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --without-shapelib..."
rm regression.log
(nice ./configure --without-shapelib 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --without-pcre..."
rm regression.log
(nice ./configure --without-pcre 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --without-dbfawk..."
rm regression.log
(nice ./configure --without-dbfawk 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --without-map-cache..."
rm regression.log
(nice ./configure --without-map-cache 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --with-errorpopups..."
rm regression.log
(nice ./configure --with-errorpopups 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --with-libgc..."
rm regression.log
(nice ./configure --with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --with-profiling..."
rm regression.log
(nice ./configure --with-profiling 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with each flag in turn, one flag at a time
echo
echo "    TEST: --with-rtree..."
rm regression.log
(nice ./configure --with-rtree 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL --without-ax25..."
rm regression.log
(nice ./configure --without-ax25 \
--with-errorpopups --with-rtree --with-profiling \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL --without-festival..."
rm regression.log
(nice ./configure --without-festival \
--with-errorpopups --with-rtree --with-profiling \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL --without-gpsman..."
rm regression.log
(nice ./configure --without-gpsman \
--with-errorpopups --with-rtree --with-profiling \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL --without-imagemagick..."
rm regression.log
(nice ./configure --without-imagemagick \
--with-errorpopups --with-rtree --with-profiling \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL --without-libproj..."
rm regression.log
(nice ./configure --without-libproj \
--with-errorpopups --with-rtree --with-profiling \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL --without-geotiff..."
rm regression.log
(nice ./configure --without-geotiff \
--with-errorpopups --with-rtree --with-profiling \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL --without-gdal..."
rm regression.log
(nice ./configure --without-gdal \
--with-errorpopups --with-rtree --with-profiling \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL --without-shapelib..."
rm regression.log
(nice ./configure --without-shapelib \
--with-errorpopups --with-rtree --with-profiling \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL --without-pcre..."
rm regression.log
(nice ./configure --without-pcre \
--with-errorpopups --with-rtree --with-profiling \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL --without-dbfawk..."
rm regression.log
(nice ./configure --without-dbfawk \
--with-errorpopups --with-rtree --with-profiling \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL --without-map-cache..."
rm regression.log
(nice ./configure --without-map-cache \
--with-errorpopups --with-rtree --with-profiling \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL except errorpopups..."
rm regression.log
(nice ./configure \
--with-rtree --with-profiling \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL except libgc..."
rm regression.log
(nice ./configure \
--with-errorpopups --with-rtree --with-profiling \
2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL except profiling..."
rm regression.log
(nice ./configure \
--with-errorpopups --with-rtree \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test with all but one optional library enabled
echo
echo "    TEST: ALL except rtree..."
rm regression.log
(nice ./configure \
--with-errorpopups --with-profiling \
--with-libgc 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Test default compile, no configure flags at all.  This test will
# also put the system back into a mode where a "make install" should
# be proper for this exact system.
echo
echo "    TEST: Default configure..."
rm regression.log
(nice ./configure 2>&1) >> regression.log
echo -n "        "
head -1 summary.log
(nice make clean 2>&1) >/dev/null
(nice make 2>&1) >> regression.log
grep -i warning regression.log
grep -i error regression.log | grep -vi errorpopups | grep -v "checking for strerror"



# Cleanup
rm regression.log


